{"version":3,"sources":["logo.svg","components/List/ListItem.js","components/List/List.js","App.js","api.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","name","city","cusineStyles","rating","numOfReviews","ranking","className","style","margin","map","el","key","List","props","restArr","App","useState","restaurantsArr","setRestaurantsArr","allCusineTypes","setAllCusineTypes","cusineType","setCusineType","rankingType","setRankingType","useEffect","axios","get","then","res","turnRestaurantCusinesStrToArr","data","filterRestaurants","getAllCusineTypes","rankVal","newRestaurantsArr","forEach","includes","push","sort","a","b","Ranking","restaurantObj","replace","split","arr","value","onChange","e","val","target","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86ea6daf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nconst ListItem = ({name, city, cusineStyles, rating, numOfReviews, ranking}) => {\r\n    return (\r\n        <div className={'list-item-wrp'}>\r\n            <div className={'list-item'}>\r\n                <small>{city}</small>\r\n                <h3 style={{margin: '5px 0 0'}}>{name}</h3>\r\n                <ul>\r\n                    {cusineStyles.map(el => <li key={el}>{el}</li>)}\r\n                </ul>\r\n                <div className={'rating-wrp'}>\r\n                    <div>Rating: <b>{rating}</b></div>\r\n                    <div>Number of Reviews: <b>{numOfReviews}</b></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListItem;","import React from \"react\";\r\nimport ListItem from './ListItem';\r\n\r\nconst List = props => {\r\n    if(props.restArr){\r\n        return (\r\n            <div className={'list-wrp'}>\r\n                {props.restArr.map(el => {\r\n                    return <ListItem\r\n                        key={el[\"Name\"]}\r\n                        name={el[\"Name\"]}\r\n                        city={el[\"City\"]}\r\n                        cusineStyles={el[\"Cuisine Style\"]}\r\n                        rating={el[\"Rating\"]}\r\n                        numOfReviews={el[\"Number of Reviews\"]}\r\n                        ranking={el[\"Ranking\"]}\r\n                    />\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default List;","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {getRestaurantsData} from './api';\nimport List from \"./components/List/List\";\n\nfunction App() {\n    //all resturants arr\n    const [restaurantsArr, setRestaurantsArr] = useState(null);\n    //all cusine types\n    const [allCusineTypes, setAllCusineTypes] = useState([]);\n    //cusine to sort by\n    const [cusineType, setCusineType] = useState(0); // 0 - is not selected\n    //rank to sort by\n    const [rankingType, setRankingType] = useState(0); //0 - not selected;  1 - high to low; 2- low to high;\n\n\n    useEffect(() => {\n        getRestaurantsData()\n            .then (res => {\n                let restaurantsArr = turnRestaurantCusinesStrToArr(res.data);\n                //set restuarans arr\n                setRestaurantsArr(filterRestaurants(restaurantsArr));\n                //set cusine types arr\n                setAllCusineTypes(getAllCusineTypes(restaurantsArr));\n            });\n    }, [cusineType, rankingType]);\n\n\n    const filterRestaurants = (restaurantsArr) => {\n        let newRestaurantsArr = restaurantsArr;\n        if(typeof cusineType === 'string' && cusineType !== '0'){\n            newRestaurantsArr = [];\n            restaurantsArr.forEach((el) => {\n                if(el[\"Cuisine Style\"].includes(cusineType)){\n                    newRestaurantsArr.push(el);\n                }\n            });\n        }\n\n\n        if(rankingType >= 1 && rankingType <= 2){\n            let rankVal;\n            if(rankingType === 1) rankVal = -1; // high to low\n            if(rankingType === 2) rankVal = 1; // low to high;\n\n            newRestaurantsArr.sort((a, b) => {\n                if (a.Ranking < b.Ranking) {\n                    return rankVal;\n                }\n                if (a.Ranking > b.Ranking) {\n                    return -rankVal;\n                }\n                return 0;\n            })\n        }\n\n\n        return newRestaurantsArr;\n\n    }\n\n    const cleanCusinesStringToArr = (str) => {\n        str = str.replace(/[['\\] ]/g, '');\n        return str.split(',');\n    }\n\n    const turnRestaurantCusinesStrToArr = (restaurantsArr) => {\n        restaurantsArr.forEach(restaurantObj => {\n            restaurantObj[\"Cuisine Style\"] = cleanCusinesStringToArr(restaurantObj[\"Cuisine Style\"]);\n        });\n        return restaurantsArr;\n    }\n\n    const getAllCusineTypes = (restaurantsArr) => {\n        const arr = [];\n        restaurantsArr.forEach(restaurantObj => {\n            restaurantObj[\"Cuisine Style\"].forEach(el => {\n                // debugger;\n                if(!arr.includes(el)){\n                    arr.push(el);\n                }\n            });\n        });\n        return arr;\n    }\n\n    const onCusineChangeHandler = (e) => {\n        let val = e.target.value;\n        val = val === '0' ? 0 : val;\n        setCusineType(val);\n    }\n\n    const onRankingChangeHandler = (e) => {\n        setRankingType(parseInt(e.target.value));\n    }\n\n\n\n\n    return (\n    <div className=\"App\">\n        <div>\n            <select value={cusineType} onChange={onCusineChangeHandler}>\n                <option value=\"0\">Choose Cusine</option>\n                {allCusineTypes.map(el => <option key={el} value={el}>{el}</option>)}\n            </select>\n\n            <select value={rankingType} onChange={onRankingChangeHandler}>\n                <option value=\"0\">Ranking</option>\n                <option value=\"2\">Rating: Low to High</option>\n                <option value=\"1\">Rating: High to Low</option>\n            </select>\n        </div>\n        \n        <List restArr={restaurantsArr} />\n    </div>\n    );\n}\n\nexport default App;\n","import axios from 'axios';\r\n\r\nexport const getRestaurantsData = () => {\r\n    return axios.get('https://raw.githubusercontent.com/MishaBatsiashvili/myJsonPlaceholder/master/db.json');\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}